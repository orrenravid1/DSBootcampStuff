# -*- coding: utf-8 -*-
"""DataScienceBootcampLecture1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SZFfo4iyAlMt7I5EW6uoUfKFAJzPHUBl

Code based on https://medium.com/@haydar_ai/learning-data-science-day-9-linear-regression-on-boston-housing-dataset-cd62a80775ef.

Import relevant libraries into python
"""

import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.datasets import load_boston
from sklearn.model_selection import train_test_split
import statsmodels.api as sm
import pandas as pd
from matplotlib import pyplot as plt

"""Load the boston dataset, look at the dimensions of the data, and print the description of the data."""

boston = load_boston()
print(boston.data.shape)
print(boston.DESCR)

"""We are going to create a **pandas dataframe** out of the data. A dataframe is essentially a spreadsheet that can be accessed, modified, and analyzed through code."""

bos_df = pd.DataFrame(boston.data)
print(boston.feature_names)

"""Next, set the title of each column to the feature names of the boston housing data. Then, add an additional column including the housing price data. This is stored in
```
boston.target
```
Finally, let's take a look at the first 5 rows i.e. the **head** of the data.
"""

bos_df.columns = boston.feature_names
bos_df['PRICE'] = boston.target
print(bos_df.head())

"""Now we choose our independent and dependent variable for analysis. Here, we want to see what the relationship between housing prices and crime rate is. Now, let's set our independent (housing prices) and dependent (crime rate) variables equal to their proper columns."""

var_x = 'PRICE'
var_y = 'CRIM'
X = bos_df[var_x]
Y = bos_df[var_y]

"""Here, we split the data up into training and testing data. This is done so that once we create a regression line using the testing data, we can check whether our line generalizes to the rest of the data. (Note, we also have some lines of the form 


```
a = a.numpy()
a = a.reshape(-1,1)
```

).
This is done for the purpose of formatting the dimensions of the data properly for use in the linear regression function later on.
"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.33, random_state = 5)
X_train = X_train.to_numpy()
X_train = X_train.reshape(-1,1)
X_test = X_test.to_numpy()
X_test = X_test.reshape(-1,1)
Y_train = Y_train.to_numpy()
Y_train = Y_train.reshape(-1,1)
Y_test = Y_test.to_numpy()
Y_test = Y_test.reshape(-1,1)
print(X_train.shape, Y_train.shape, X_test.shape, Y_test.shape)

"""Finally, we create a new linear regression model and fit it based on our training data for the independent and dependent variable.
We now see what line of best fit the model generates for the testing data (which it has not been trained on.)
"""

linreg = LinearRegression()
linreg.fit(X_train, Y_train)
Y_pred = linreg.predict(X_test)

"""Finally, plot the predicted line over the test data and see how well it fits. What sort of relationship are we seeing in the data? Does this agree with our expectations?"""

plt.scatter(X_test, Y_test, c='blue')
plt.plot(X_test, Y_pred, c='red')
plt.show()